import FullertonLoan from "../../../../pages/loan_payments_page/fullerton.payment.page";
import { AllureUtil as allure } from "../../../../utils/util.allure";
import { fullertonData } from "../../../../data/fullerton.loanform.data";
import { dataToMoveTo } from "../../../../data/fullerton.move.to.particular.page"
import mongoConnect from "../../../../utils/mongoconnect";

describe("Verify field validation for Fullerton V3 payment option", async () => {
    beforeEach('Open payment portal', async () => {
        allure.startStep("Maximize the window");
        await browser.maximizeWindow();
        allure.startStep('Open Byjus payment login page');
        await FullertonLoan.openByjusPayPage();
        allure.startStep('Login to the payment page', true);
        await FullertonLoan.loginPaymentPage(process.env.USER_EMAIL_ACHIEVETESTING, process.env.PWD_ACHIEVETESTING);
        allure.startStep('Deleting object from Db which has pan number we used', true);
        await mongoConnect.fullertonDeleteObjectFromDb(fullertonData.fullertonValidData.panNumber);
    })

    it('Validate field validations when submitted blank', async () => {
        allure.startStep('Click on Fullerton pay button');
        await FullertonLoan.btnFullertonpay.click();
        allure.startStep('Click on skip upload documents button in the pop up', true);
        await FullertonLoan.btnSkipUploadDocument.click();
        allure.startStep('Wait for the Checkbox to be clickable', true);
        await FullertonLoan.cbToSendOtp.isClickable({ timeout: 5000 });
        allure.startStep('Click on checkbox', true);
        await FullertonLoan.cbToSendOtp.click();
        allure.startStep('Click on Send OTP button', true);
        await FullertonLoan.btnSendOtp.click();
        allure.startStep('Wait for an error message to be displayed', true);
        await FullertonLoan.getErrorMsgTextFieldElement('applicantFirstName').waitForDisplayed({ timeout: 50000 });
        allure.startStep('Verify the correct error message is displayed for the  Borrower First name', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement('applicantFirstName')).toHaveTextContaining('Borrower First Name is require');
        allure.startStep('Verify the correct error message is displayed for the  Borrower last name', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement('applicantLastName')).toHaveTextContaining('Borrower Last Name is require');
        allure.startStep('Verify the correct error message is displayed for the Invalid Pan number', true);
        let errorMessage = await expect(await FullertonLoan.getErrorMsgTextFieldElement('panNo').getText());
        allure.startStep('Varify correct error message displayed', true);
        if (errorMessage == "Invalid PAN Card No") {
            await expect(errorMessage).toEqual("Invalid PAN Card No");
        }
        else if (errorMessage == "PAN Card No is required") {
            await expect(errorMessage).toEqual("PAN Card No is required");
        }
        allure.startStep('Verify the correct error message is displayed for the  Age', true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement('Birthdate is required').getText()).toEqual('Birthdate is required');
        allure.startStep('Verify the correct error message is displayed for address proof', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement('aadharNo').getText()).toEqual('Address Proof Number is required');
        allure.startStep('Verify the correct error message is displayed for the  Gender', true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement('Gender is required').getText()).toEqual('Gender is required');
        allure.startStep('Verify the correct error message is displayed for the  Mobile number', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement('telephoneNumber').getText()).toEqual('Mobile No is required');
        allure.startStep('Verify the correct error message is displayed for the  Email address', true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement('Email address is required').getText()).toEqual('Email address is required');
        allure.startStep('Verify the correct error message is displayed for the  Borrowers Father Name', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement("fathersName")).toHaveTextContaining("Borrower's Father Name is require");
        allure.startStep('Verify the correct error message is displayed for martial status', true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement('Marital Status is required.').getText()).toEqual('Marital Status is required.');
        allure.startStep('Verify the correct error message is displayed for the  Qualification', true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement('Education Qualification is required.').getText()).toEqual('Education Qualification is required.');
        allure.startStep('Verify the correct error message is displayed for the  occupation', true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement('Occupation Type is required.').getText()).toEqual('Occupation Type is required.');
        allure.startStep('Verify the correct error message is displayed for the  Address', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement('addressLine1').getText()).toEqual('Address is required');
        allure.startStep('Verify the correct error message is displayed for the  Landmark', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement('landmark').getText()).toEqual('LandMark is required');
        allure.startStep('Verify the correct error message is displayed for the  Pincode', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement('pinCode').getText()).toEqual('Pincode is required');
        allure.startStep('Verify the correct error message is displayed for the  State', true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement('State is required').getText()).toEqual('State is required');
        allure.startStep('Verify the correct error message is displayed for the  City', true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement('City is required').getText()).toEqual('City is required');
        allure.startStep('Verify the correct error message is displayed for the  Loan amount', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement('requestedLoanAmount').getText()).toEqual('Loan Amount (Rs.) is required');
        allure.startStep('Verify the correct error message is displayed for the  Loan tenure', true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement('Loan Tenure is required').getText()).toEqual('Loan Tenure is required');
        allure.startStep('Verify the correct error message is displayed for student grade', true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement('Student Grade is required').getText()).toEqual('Student Grade is required');
        allure.startStep("Verify that the correct error message for Residence type is displayed", true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement("Residence Type is required.").getText()).toEqual("Residence Type is required.");
        allure.startStep("Verify that the correct error message for Birthdate is displayed", true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement("Student Date of Birth is required.").getText()).toEqual("Student Date of Birth is required.");
        allure.startStep("Verify that the correct error message for Income  is displayed", true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement("incomeSlab").getText()).toEqual("Income (monthly) is required.");
        allure.startStep("Verify that the correct error message for Alternate mobile no is displayed", true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement("alternateTelephoneNumber").getText()).toEqual("Alternate Mobile No is required.");
        allure.startStep("Verify that the correct error message for Student Name is displayed", true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement("studentName").getText()).toEqual("Student Name is required.");
        allure.startStep('Verify the correct error message is displayed for the  Borrowers Mother Name', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement("mothersName").getText()).toEqual("Borrower's Mother Name is required.");
        allure.endStep();
    });
    it('Validate Loan Amount should be between Rs.18000 and Rs. 120000', async () => {
        allure.startStep('Enter invalid loan amount less than 18000 in Customer and Loan Details form of Fullerton loan & Click on sent OTP');
        await FullertonLoan.enterCustomerAndLoanDetails(fullertonData.fullertonInvalidLoanAmountLessthan18000);
        allure.startStep('Wait for the invalid loan amount error message to be displayed', true);
        await FullertonLoan.getErrorMsgTextFieldElement('requestedLoanAmount').waitForDisplayed({ timeout: 10000 });
        allure.startStep('Verify the correct error message is displayed for the Invalid loan amount less than 18000', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement('requestedLoanAmount').getText()).toEqual('Amount should be >= Rs.18000 and <= Rs. 120000');
        allure.startStep('Open Byjus payment login page');
        await FullertonLoan.openByjusPayPage();
        allure.startStep('Enter invalid loan amount more than 120000 in Customer and Loan Details form of Fullerton loan & Click on sent OTP');
        await FullertonLoan.enterCustomerAndLoanDetails(fullertonData.fullertonInvalidLoanAmountMorethan120000);
        allure.startStep('Wait for the invalid loan amount error message to be displayed', true);
        await FullertonLoan.getErrorMsgTextFieldElement('requestedLoanAmount').waitForDisplayed({ timeout: 10000 });
        allure.startStep('Verify the correct error message is displayed for the Invalid loan amount more than 120000', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement('requestedLoanAmount').getText()).toEqual('Amount should be >= Rs.18000 and <= Rs. 120000');
        allure.endStep();
    })

    it('Validate Age should be more than 21 years and less than 60 years', async () => {
        allure.startStep('Enter invalid age less than 21 years in Customer and Loan Details form of fullerton loan & Click on sent OTP');
        await FullertonLoan.enterCustomerAndLoanDetails(fullertonData.fullertonInvalidAgeLessthan21);
        allure.startStep('Wait for the invalid age error message to be displayed', true);
        await FullertonLoan.getErrorMsgDropdownElement('Age should be more than 21 years and less than 60 years').waitForDisplayed({ timeout: 5000 });
        allure.startStep('Verify the correct error message is displayed for the Invalid age less than 21 years', true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement('Age should be more than 21 years and less than 60 years').getText()).toEqual('Age should be more than 21 years and less than 60 years');
        allure.startStep('Open Byjus payment login page');
        await FullertonLoan.openByjusPayPage();
        allure.startStep('Enter invalid age more than 60 years in Customer and Loan Details form of fullerton loan & Click on sent OTP');
        await FullertonLoan.enterCustomerAndLoanDetails(fullertonData.fullertonInvalidAgeMorethan60);
        allure.startStep('Wait for the invalid age error message to be displayed', true);
        await FullertonLoan.getErrorMsgDropdownElement('Age should be more than 21 years and less than 60 years').waitForDisplayed({ timeout: 5000 });
        allure.startStep('Verify the correct error message is displayed for the Invalid age more than 60 years', true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement('Age should be more than 21 years and less than 60 years').getText()).toEqual('Age should be more than 21 years and less than 60 years');
        allure.endStep();
    })

    it('Validate correct error message displayed for pan number ', async () => {
        allure.startStep('Enter invalid pan number 9 digits in Customer and Loan Details form of fullerton loan & Click on sent OTP');
        await FullertonLoan.enterCustomerAndLoanDetails(fullertonData.fullertonInvalidPanNo9digits);
        allure.startStep('Wait for the invalid pan number error message to be displayed', true);
        await FullertonLoan.getErrorMsgTextFieldElement('panNo').waitForDisplayed({ timeout: 5000 });
        allure.startStep('Verify the correct error message is displayed for the Invalid pan number 9 digits', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement('panNo').getText()).toEqual('Invalid PAN Card No');
        allure.endStep();
    })
    it('Validate the Customer Phone should accept 10digits, also check for the error messages for less and more than 10 digits', async () => {
        allure.startStep('Enter invalid mobile number less than 10 digits in Customer and Loan Details form of Fullerton loan & Click on sent OTP');
        await FullertonLoan.enterCustomerAndLoanDetails(fullertonData.fullertonInvalidMobileNoLessthan10Digits);
        allure.startStep('Wait for the invalid mobile number error message to be displayed', true);
        await FullertonLoan.getErrorMsgTextFieldElement('telephoneNumber').waitForDisplayed({ timeout: 5000 });
        allure.startStep('Verify the correct error message is displayed for the Invalid mobile number less than 10 digits', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement('telephoneNumber').getText()).toEqual('Invalid Mobile No');
        allure.startStep('Open Byjus payment login page');
        await FullertonLoan.openByjusPayPage();
        allure.startStep('Enter invalid mobile number more than 10 digits in Customer and Loan Details form of Fullerton loan & Click on sent OTP');
        await FullertonLoan.enterCustomerAndLoanDetails(fullertonData.fullertonInvalidMobileNoMorethan10Digits);
        allure.startStep('Wait for the invalid mobile number error message to be displayed', true);
        await FullertonLoan.getErrorMsgTextFieldElement('telephoneNumber').waitForDisplayed({ timeout: 5000 });
        allure.startStep('Verify the correct error message is displayed for the Invalid mobile number more than 10 digits', true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement('telephoneNumber').getText()).toEqual('Invalid Mobile No');
        allure.endStep();
    })

    it('Validate error message if we click on Continue button without selecting Bank statement source', async () => {
        allure.startStep('Enter valid customer details in Customer and Loan Details form of fullerton loan & Click on sent OTP');
        let panNumber = await FullertonLoan.enterCustomerAndLoanDetails(fullertonData.fullertonValidData);
        allure.startStep('Click on proceed button in pop up');
        await FullertonLoan.clickOnProceedButton();
        allure.startStep('Open new window of payments page');
        await browser.newWindow(process.env.PAY_BYJUS_ORDERS_URL);
        allure.startStep('Login to the payment page', true);
        await FullertonLoan.loginPaymentPage(process.env.USER_EMAIL_ACHIEVETESTING, process.env.PWD_ACHIEVETESTING);
        allure.startStep("Get app id from unprocessed loan page", true);
        let appId = await FullertonLoan.returnAppId(fullertonData.fullertonValidData.panNumber);
        allure.startStep("Address of window is stored in a variable", true);
        const handles = await browser.getWindowHandles();
        allure.startStep('Switched to window handles[0]', true);
        await browser.switchToWindow(handles[0]);
        allure.startStep('Close the window');
        await browser.closeWindow();
        allure.startStep('Switched to window handles[1]', true);
        await browser.switchToWindow(handles[1]);
        allure.startStep("Update status in db to bypass otp process", true);
        await mongoConnect.updatetransactionsCibilRecord(appId);
        allure.startStep("Refresh page to get the updates visible", true);
        await browser.refresh();
        allure.startStep('clicking on resume button', true);
        await FullertonLoan.btnResume(appId).click();
        allure.startStep("Click on continue button", true);
        await FullertonLoan.btnContinue.click();
        allure.startStep('Waiting for Bank statement radio button to be clickable', true);
        await FullertonLoan.rbBankStatementPassbook.waitForClickable({ timeout: 10000 });
        allure.startStep('Click on for Bank statement radio button', true);
        await FullertonLoan.rbBankStatementPassbook.click();
        allure.startStep('Click on checkbox to continue button', true);
        await FullertonLoan.cbToSendOtp.click();
        allure.startStep('Click on continue button', true);
        await FullertonLoan.btnContinue.click();
        allure.startStep('Wait for error message to be displayed', true);
        await FullertonLoan.ErrorMsgBankStatementUpload.waitForDisplayed({ timeout: 5000 })
        allure.startStep('Verify the correct error message is displayed', true);
        await expect(await FullertonLoan.ErrorMsgBankStatementUpload.getText()).toEqual('Please select bank statement source.');
        allure.endStep();
    });
    it('Validate error message when Bank statement source is selected & if we click on Upload button without choosing the file', async () => {
        allure.startStep('Enter valid customer details in Customer and Loan Details form of fullerton loan & Click on sent OTP');
        let panNumber = await FullertonLoan.enterCustomerAndLoanDetails(fullertonData.fullertonValidData);
        allure.startStep('Click on proceed button in pop up');
        await FullertonLoan.clickOnProceedButton();
        allure.startStep('Open new window of payments page');
        await browser.newWindow(process.env.PAY_BYJUS_ORDERS_URL);
        allure.startStep('Login to the payment page', true);
        await FullertonLoan.loginPaymentPage(process.env.USER_EMAIL_ACHIEVETESTING, process.env.PWD_ACHIEVETESTING);
        allure.startStep("Get app id from unprocessed loan page", true);
        let appId = await FullertonLoan.returnAppId(fullertonData.fullertonValidData.panNumber);
        allure.startStep("Address of window is stored in a variable", true);
        const handles = await browser.getWindowHandles();
        allure.startStep('Switched to window handles[0]', true);
        await browser.switchToWindow(handles[0]);
        allure.startStep('Close the window');
        await browser.closeWindow();
        allure.startStep('Switched to window handles[1]', true);
        await browser.switchToWindow(handles[1]);
        allure.startStep("Update status in db to bypass otp process", true);
        await mongoConnect.updatetransactionsCibilRecord(appId);
        allure.startStep("Refresh page to get the updates visible", true);
        await browser.refresh();
        allure.startStep('clicking on resume button', true);
        await FullertonLoan.btnResume(appId).click();
        allure.startStep("Click on continue button", true);
        await FullertonLoan.btnContinue.click();
        allure.startStep('Waiting for Bank statement radio button to be clickable', true);
        await FullertonLoan.rbBankStatementPassbook.waitForClickable({ timeout: 10000 });
        allure.startStep('Click on for Bank statement radio button', true);
        await FullertonLoan.rbBankStatementPassbook.click();
        allure.startStep('Click on for Bank statement source drop down', true);
        await FullertonLoan.ddBankStatementSource.click();
        allure.startStep('Select email as a source for Bank statement', true);
        await browser.keys(["E", "m", "a", "i", "l", "Tab"])
        allure.startStep('Click on upload radio button', true);
        await FullertonLoan.rbUploadDocument.click();
        allure.startStep('Click on upload button', true);
        await FullertonLoan.btnUploadFile.click();
        allure.startStep('Wait for error message to be displayed', true);
        await FullertonLoan.ErrorMsgBankStatementUpload.waitForDisplayed({ timeout: 10000 })
        allure.startStep('Verify the correct error message is displayed', true);
        await expect(await FullertonLoan.ErrorMsgBankStatementUpload.getText()).toEqual('You need to click photo first or select file to upload');
        allure.endStep();
    });

    it('Validate error message when Bank statement source is selected & if we click on Continue button without uploading the Screeshot of Bank statement', async () => {
        allure.startStep('Enter valid customer details in Customer and Loan Details form of fullerton loan & Click on sent OTP');
        let panNumber = await FullertonLoan.enterCustomerAndLoanDetails(fullertonData.fullertonValidData);
        allure.startStep('Click on proceed button in pop up');
        await FullertonLoan.clickOnProceedButton();
        allure.startStep('Open new window of payments page');
        await browser.newWindow(process.env.PAY_BYJUS_ORDERS_URL);
        allure.startStep('Login to the payment page', true);
        await FullertonLoan.loginPaymentPage(process.env.USER_EMAIL_ACHIEVETESTING, process.env.PWD_ACHIEVETESTING);
        allure.startStep("Get app id from unprocessed loan page", true);
        let appId = await FullertonLoan.returnAppId(fullertonData.fullertonValidData.panNumber);
        allure.startStep("Address of window is stored in a variable", true);
        const handles = await browser.getWindowHandles();
        allure.startStep('Switched to window handles[0]', true);
        await browser.switchToWindow(handles[0]);
        allure.startStep('Close the window');
        await browser.closeWindow();
        allure.startStep('Switched to window handles[1]', true);
        await browser.switchToWindow(handles[1]);
        allure.startStep("Update status in db to bypass otp process", true);
        await mongoConnect.updatetransactionsCibilRecord(appId);
        allure.startStep("Refresh page to get the updates visible", true);
        await browser.refresh();
        allure.startStep('clicking on resume button', true);
        await FullertonLoan.btnResume(appId).click();
        allure.startStep("Click on continue button", true);
        await FullertonLoan.btnContinue.click();
        allure.startStep('Waiting for Bank statement radio button to be clickable', true);
        await FullertonLoan.rbBankStatementPassbook.waitForClickable({ timeout: 10000 });
        allure.startStep('Click on for Bank statement radio button', true);
        await FullertonLoan.rbBankStatementPassbook.click();
        allure.startStep('Click on for Bank statement source drop down', true);
        await FullertonLoan.ddBankStatementSource.click();
        allure.startStep('Select email as a source for Bank statement', true);
        await browser.keys(["E", "m", "a", "i", "l", "Tab"])
        allure.startStep('Click on upload radio button', true);
        await FullertonLoan.rbUploadDocument.click();
        allure.startStep('Click on check box to continue button', true);
        await FullertonLoan.cbToSendOtp.click();
        allure.startStep('Click on continue button', true);
        await FullertonLoan.btnContinue.click();
        allure.startStep('Wait for error message to be displayed', true);
        await FullertonLoan.ErrorMsgBankStatementUpload.waitForDisplayed({ timeout: 10000 })
        allure.startStep('Verify the correct error message is displayed', true);
        await expect(await FullertonLoan.ErrorMsgBankStatementUpload.getText()).toEqual('Please upload a screenshot of the source.');
        allure.endStep();
    });

    it('Validate field validations when submitted blank (not working until you enter account number)', async () => {
        allure.startStep("Click on the fullerton pay button and fill details with valid data");
        let panNumber = await FullertonLoan.enterCustomerAndLoanDetails(fullertonData.fullertonValidData);
        allure.startStep("Click on Proceed button", true);
        await FullertonLoan.clickOnProceedButton();
        allure.startStep("Open Order Page Url in new window", true);
        await browser.newWindow(`${process.env.PAY_BYJUS_ORDERS_URL}`);
        allure.startStep("Login to the payment page", true);
        await FullertonLoan.loginPaymentPage(process.env.USER_EMAIL_ACHIEVETESTING, process.env.PWD_ACHIEVETESTING);
        allure.startStep("Get app id from unprocessed loan page", true);
        let appId = await FullertonLoan.returnAppId(fullertonData.fullertonValidData.panNumber);
        allure.startStep("Address of window is stored in a variable", true);
        const handles = await browser.getWindowHandles();
        allure.startStep('Switched to window handles[0]', true);
        await browser.switchToWindow(handles[0]);
        allure.startStep('Close the window');
        await browser.closeWindow();
        allure.startStep('Switched to window handles[1]', true);
        await browser.switchToWindow(handles[1]);
        allure.startStep("Update status in db to bypass otp process", true);
        await mongoConnect.updatetransactionsCibilRecord(appId);
        allure.startStep("Refresh page to get the updates visible", true);
        await browser.refresh();
        allure.startStep('clicking on resume button', true);
        await FullertonLoan.btnResume(appId).click();
        allure.startStep("Add data to db to move to Account Information page", true);
        await mongoConnect.fullertonAddDetailsToAccountInfo(appId, dataToMoveTo.AccountInfo);
        allure.startStep("Refresh page to get the updates visible", true);
        await browser.refresh();
        allure.startStep("Click on continue button", true);
        await FullertonLoan.btnContinue.click();
        allure.startStep("Select Bank statement passbook radio button", true);
        await FullertonLoan.rbBankStatementPassbook.click();
        allure.startStep("Click on Name title drop down", true);
        await FullertonLoan.ddNameTitle.click();
        allure.startStep("Set value to Mr in the drop down", true);
        await browser.keys(["M", "r", "Tab"]);
        allure.startStep("Set value to Dummy customer name in the Customer Name text field", true);
        await FullertonLoan.tfCustomerName.setValue("Dummy customer name");
        allure.startStep("Set value to 2021156789 in the Account Number text field", true);
        await FullertonLoan.tfAccountNumber.setValue("2021156789");
        allure.startStep("Click on continue button", true);
        await FullertonLoan.btnContinue.click();
        allure.startStep("Wait for error message to be displayed", true);
        await FullertonLoan.getErrorMsgDropdownElement("Account Type is required.").waitForDisplayed({ timeout: 9000 });
        allure.startStep("Verify the error message for Account type is required is displayed", true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement("Account Type is required.").getText()).toEqual("Account Type is required.");
        allure.startStep("Verify the error message for Bank Name is required is displayed", true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement("Bank Name is required.").getText()).toEqual("Bank Name is required.");
        allure.startStep("Verify the error message for IFSC is required is displayed", true);
        await expect(await FullertonLoan.getErrorMsgFrom("IFSC").getText()).toEqual("IFSC is required.");
        allure.startStep("Verify the error message for MICR is required is displayed", true);
        await expect(await FullertonLoan.getErrorMsgFrom("MICR").getText()).toEqual("MICR is required.");
        allure.startStep("Verify the error message for City is required is displayed", true);
        await expect(await FullertonLoan.getErrorMsgFrom("City").getText()).toEqual("City is required.");
        allure.endStep();
    });

    it("Validate Account number must be numeric", async () => {
        allure.startStep('Enter valid customer details in Customer and Loan Details form of fullerton loan & Click on sent OTP');
        let panNumber = await FullertonLoan.enterCustomerAndLoanDetails(fullertonData.fullertonValidData);
        allure.startStep("Click on Proceed button", true);
        await FullertonLoan.clickOnProceedButton();
        allure.startStep("Open Order Page Url in new window", true);
        await browser.newWindow(`${process.env.PAY_BYJUS_ORDERS_URL}`);
        allure.startStep("Login to the payment page", true);
        await FullertonLoan.loginPaymentPage(process.env.USER_EMAIL_ACHIEVETESTING, process.env.PWD_ACHIEVETESTING);
        allure.startStep("Get app id from unprocessed loan page", true);
        let appId = await FullertonLoan.returnAppId(fullertonData.fullertonValidData.panNumber);
        allure.startStep("Address of window is stored in a variable", true);
        const handles = await browser.getWindowHandles();
        allure.startStep('Switched to window handles[0]', true);
        await browser.switchToWindow(handles[0]);
        allure.startStep('Close the window');
        await browser.closeWindow();
        allure.startStep('Switched to window handles[1]', true);
        await browser.switchToWindow(handles[1]);
        allure.startStep("Update status in db to bypass otp process", true);
        await mongoConnect.updatetransactionsCibilRecord(appId);
        allure.startStep("Refresh page to get the updates visible", true);
        await browser.refresh();
        allure.startStep('clicking on resume button', true);
        await FullertonLoan.btnResume(appId).click();
        allure.startStep("Add data to db to move to Account Information page", true);
        await mongoConnect.fullertonAddDetailsToAccountInfo(appId, dataToMoveTo.AccountInfo);
        allure.startStep("Refresh page to get the updates visible", true);
        await browser.refresh();
        allure.startStep("Click on continue button", true);
        await FullertonLoan.btnContinue.click();
        allure.startStep("Select Bank statement passbook radio button", true);
        await FullertonLoan.rbBankStatementPassbook.click();
        allure.startStep("Click on name title field", true);
        await FullertonLoan.ddNameTitle.click();
        allure.startStep("Set value to Mr in the drop down", true);
        await browser.keys(["M", "r", "Tab"]);
        allure.startStep("Set value to Dummy customer name in the Customer Name text field", true);
        await FullertonLoan.tfCustomerName.setValue("Dummy customer name");
        allure.startStep("Set random text value in the Account Number text field", true);
        await FullertonLoan.tfAccountNumber.setValue("afdctrshyu");
        allure.startStep("Click on continue button", true);
        await FullertonLoan.btnContinue.click();
        allure.startStep("Wait for error message to be displayed", true);
        await FullertonLoan.getErrorMsgTextFieldElement("accountNumber").waitForDisplayed({ timeout: 5000 });
        allure.startStep("Verify the error message for Account Number must be numeric is displayed", true);
        await expect(await FullertonLoan.getErrorMsgTextFieldElement("accountNumber").getText()).toEqual("Account number must be numeric");
        allure.endStep();
    })

    it('Validate error message when clicked on Continue button without Selecting first EMI date', async () => {
        allure.startStep('Enter valid customer details in Customer and Loan Details form of fullerton loan & Click on sent OTP');
        let panNumber = await FullertonLoan.enterCustomerAndLoanDetails(fullertonData.fullertonValidData);
        allure.startStep("Click on Proceed button", true);
        await FullertonLoan.clickOnProceedButton();
        allure.startStep("Open Order Page Url in new window", true);
        await browser.newWindow(`${process.env.PAY_BYJUS_ORDERS_URL}`);
        allure.startStep("Login to the payment page", true);
        await FullertonLoan.loginPaymentPage(process.env.USER_EMAIL_ACHIEVETESTING, process.env.PWD_ACHIEVETESTING);
        allure.startStep("Get app id from unprocessed loan page", true);
        let appId = await FullertonLoan.returnAppId(fullertonData.fullertonValidData.panNumber);
        allure.startStep("Address of window is stored in a variable", true);
        const handles = await browser.getWindowHandles();
        allure.startStep('Switched to window handles[0]', true);
        await browser.switchToWindow(handles[0]);
        allure.startStep('Close the window');
        await browser.closeWindow();
        allure.startStep('Switched to window handles[1]', true);
        await browser.switchToWindow(handles[1]);
        allure.startStep("Update status in db to bypass otp process", true);
        await mongoConnect.updatetransactionsCibilRecord(appId);
        allure.startStep("Refresh page to get the updates visible", true);
        await browser.refresh();
        allure.startStep('clicking on resume button', true);
        await FullertonLoan.btnResume(appId).click();
        allure.startStep("Add data to db to move to wait for Ops team approval page", true);
        await mongoConnect.fullertonAddDetailsToAccountInfo(appId, dataToMoveTo.WaitForOpsTeamApproval);
        allure.startStep("Creating new object in Abb assesements collection", true);
        await mongoConnect.lmsAbbAssessmentCollectionObject(appId, "fullertonv3");
        allure.startStep("Refresh page to get the updates visible", true);
        await browser.refresh();
        allure.startStep("Click on continue button", true);
        await FullertonLoan.btnContinue.click();
        allure.startStep('Update status of above appId in transactionscibil collection as Cibil check passed', true);
        await mongoConnect.updatetransactionsCibilRecordCibilCheckPassed(appId);
        allure.startStep('Go to LMS portal & approve the loan for given appId', true);
        await FullertonLoan.lmsAbbTicketApproval(process.env.USER_EMAIL_ACHIEVETESTING, process.env.PWD_ACHIEVETESTIN, appId, fullertonData.fullertonValidData);
        allure.startStep('Close the Lms window', true);
        await browser.closeWindow();
        allure.startStep('Switch to window handles[1]', true);
        await browser.switchToWindow(handles[1]);
        allure.startStep('Wait for Continue button on loan aggrement page is clickable', true);
        await FullertonLoan.btnContinue.waitForEnabled({ timeout: 60000 });
        allure.startStep('Click on Continue button on loan aggrement page', true);
        await FullertonLoan.btnContinue.click();
        allure.startStep('Wait for the error message to be displayed', true);
        await FullertonLoan.getErrorMsgDropdownElement('First EMI Date is required.').waitForDisplayed({ timeout: 10000 });
        allure.startStep('Verify that correct error message is dispalyed', true);
        await expect(await FullertonLoan.getErrorMsgDropdownElement('First EMI Date is required.').getText()).toEqual('First EMI Date is required.');
        allure.endStep();
    });

    it('Validate the error message we get when we click on upload button without choosing the file(Upload documents page)', async () => {

        allure.startStep('Enter valid customer details in Customer and Loan Details form of fullerton loan & Click on sent OTP');
        let panNumber = await FullertonLoan.enterCustomerAndLoanDetails(fullertonData.fullertonValidData);
        allure.startStep("Click on Proceed button", true);
        await FullertonLoan.clickOnProceedButton();
        allure.startStep("Open Order Page Url in new window", true);
        await browser.newWindow(`${process.env.PAY_BYJUS_ORDERS_URL}`);
        allure.startStep("Login to the payment page", true);
        await FullertonLoan.loginPaymentPage(process.env.USER_EMAIL_ACHIEVETESTING, process.env.PWD_ACHIEVETESTING);
        allure.startStep("Get app id from unprocessed loan page", true);
        let appId = await FullertonLoan.returnAppId(fullertonData.fullertonValidData.panNumber);
        allure.startStep("Address of window is stored in a variable", true);
        const handles = await browser.getWindowHandles();
        allure.startStep('Switched to window handles[0]', true);
        await browser.switchToWindow(handles[0]);
        allure.startStep('Close the window');
        await browser.closeWindow();
        allure.startStep('Switched to window handles[1]', true);
        await browser.switchToWindow(handles[1]);
        allure.startStep("Update status in db to bypass otp process", true);
        await mongoConnect.updatetransactionsCibilRecord(appId);
        allure.startStep("Refresh page to get the updates visible", true);
        await browser.refresh();
        allure.startStep('clicking on resume button', true);
        await FullertonLoan.btnResume(appId).click();
        allure.startStep("Add data to db to move to wait for Ops team approval page", true);
        await mongoConnect.fullertonAddDetailsToAccountInfo(appId, dataToMoveTo.WaitForOpsTeamApproval);
        allure.startStep("Creating new object in Abb assesements collection", true);
        await mongoConnect.lmsAbbAssessmentCollectionObject(appId, "fullertonv3");
        allure.startStep("Refresh page to get the updates visible", true);
        await browser.refresh();
        allure.startStep("Click on continue button", true);
        await FullertonLoan.btnContinue.click();
        allure.startStep('Update status of above appId in transactionscibil collection as Cibil check passed', true);
        await mongoConnect.updatetransactionsCibilRecordCibilCheckPassed(appId);
        allure.startStep('Go to LMS portal & approve the loan for given appId', true);
        await FullertonLoan.lmsAbbTicketApproval(process.env.USER_EMAIL_ACHIEVETESTING, process.env.PWD_ACHIEVETESTIN, appId, fullertonData.fullertonValidData);
        allure.startStep('Close the LMS window', true);
        await browser.closeWindow();
        allure.startStep('Switch to payments window', true);
        await browser.switchToWindow(handles[1]);
        allure.startStep('Select the EMI date & click on continue to accept the loan agreement', true);
        await FullertonLoan.selectEmiDateAndApproveLoanAgreement(panNumber);
        allure.startStep('Verify OKYC', true);
        await FullertonLoan.verifyOKYC(panNumber);
        allure.startStep('wait for borrower first name to be displayed', true);
        await FullertonLoan.tfBorrowerFirstNamePOI.waitForExist({ timeout: 10000 })
        allure.startStep('Enter borrower first name POI', true);
        await FullertonLoan.tfBorrowerFirstNamePOI.setValue(fullertonData.fullertonValidData.borrowerFirstName);
        allure.startStep('Enter borrower last name POI', true);
        await FullertonLoan.tfBorrowerlastNamePOI.setValue(fullertonData.fullertonValidData.borrowerLastName);
        allure.startStep('Enter POI number in the field', true);
        await FullertonLoan.tfPOINumber.setValue(fullertonData.fullertonValidData.panNumber);
        allure.startStep('Wait for the upload file button to be Clickable', true);
        await FullertonLoan.btnUploadFile.waitForClickable({ timeout: 10000 });
        allure.startStep('Click on upload file button', true);
        await FullertonLoan.btnUploadFile.click();
        allure.startStep('Wait for the error message to be displayed', true);
        await FullertonLoan.ErrorMsgBankStatementUpload.waitForDisplayed({ timeout: 5000 })
        allure.startStep('Verify the correct error message is displayed', true);
        await expect(await FullertonLoan.ErrorMsgBankStatementUpload.getText()).toEqual('You need to click photo first or select file to upload');
        allure.endStep();
    });
})